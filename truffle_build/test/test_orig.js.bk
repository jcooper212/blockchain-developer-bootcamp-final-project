const { time } = require('@openzeppelin/test-helpers');
const YieldFarmerV2 = artifacts.require('YieldFarmerV2.sol');
//const GovernanceToken = artifacts.require('GovernanceToken.sol');
//const LiquidityPool = artifacts.require('LiquidityPool.sol');
//const Console = require('truffle/Console.sol');
//import "truffle/Console.sol";

contract('YieldFarmerV2', accounts => {
  const [admin, trader1, trader2, _] = accounts;
  let yieldFarmer, solo, token, cToken, amountProvided, amountBorrowed, bal;

  beforeEach(async () => {
    cToken = '0xebf1a11532b93a529b5bc942b4baa98647913002'; //rinkeby cBat
    token = '0xe43a8b1bfd19721e918b6068c158bf8fab41abee'; //rinkeby bat
    amountProvided = 100;
    amountBorrowed = 70;
    yieldFarmer = await YieldFarmerV2('0x3d9819210a31b4961b30ef54be2aed79b9c9cd3b');
    var bal = await cToken.balanceOf(trader1);
    console.log("open pre -- cToken bal-->", web3.utils.fromWei(bal.toString()));
    bal = await token.balanceOf(trader1);
    console.log("open pre -- token bal-->", web3.utils.fromWei(bal.toString()));



    yieldFarmer.openPosition(solo, token, cToken, amountProvided, amountBorrowed);
    bal = await cToken.balanceOf(trader1);
    console.log("open post -- cToken bal-->", web3.utils.fromWei(bal.toString()));
    bal = await token.balanceOf(trader1);
    console.log("open post -- token bal-->", web3.utils.fromWei(bal.toString()));

        console.log("advance block");
        await time.advanceBlock();
        //await time.advanceBlock();
        //await time.advanceBlock();

        bal = await cToken.balanceOf(trader1);
        console.log("open post advance -- cToken bal-->", web3.utils.fromWei(bal.toString()));
        bal = await token.balanceOf(trader1);
        console.log("open post advance -- token bal-->", web3.utils.fromWei(bal.toString()));
    //assert(web3.utils.fromWei(balanceGovToken.toString()) === '500');


  //  underlyingToken = await UnderlyingToken.new();

    //await governanceToken.transferOwnership(liquidityPool.address);
    //  await Promise.all([
    //    underlyingToken.faucet(trader1, web3.utils.toWei('1000')),
    //  underlyingToken.faucet(trader2, web3.utils.toWei('1000'))
    //]);
  });
});
  /**
  it('trader1 and 2 balances', async () => {
    bal = await underlyingToken.balanceOf(trader1);
    assert(web3.utils.fromWei(bal.toString()) === '1000');
    bal = await underlyingToken.balanceOf(trader2);
    assert(web3.utils.fromWei(bal.toString()) === '1000');
  });
**/
